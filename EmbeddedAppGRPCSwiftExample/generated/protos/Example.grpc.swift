//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: protos/Example.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `IpcExample_IPCExampleServiceClient`, then call methods of this protocol to make API calls.
public protocol IpcExample_IPCExampleServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol? { get }

  func bidirectionalStream(
    callOptions: CallOptions?,
    handler: @escaping (IpcExample_BidirectionalStreamResponse) -> Void
  ) -> BidirectionalStreamingCall<IpcExample_BidirectionalStreamRequest, IpcExample_BidirectionalStreamResponse>
}

extension IpcExample_IPCExampleServiceClientProtocol {
  public var serviceName: String {
    return "ipcExample.IPCExampleService"
  }

  /// Bidirectional streaming call to bidirectionalStream
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func bidirectionalStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (IpcExample_BidirectionalStreamResponse) -> Void
  ) -> BidirectionalStreamingCall<IpcExample_BidirectionalStreamRequest, IpcExample_BidirectionalStreamResponse> {
    return self.makeBidirectionalStreamingCall(
      path: IpcExample_IPCExampleServiceClientMetadata.Methods.bidirectionalStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension IpcExample_IPCExampleServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "IpcExample_IPCExampleServiceNIOClient")
public final class IpcExample_IPCExampleServiceClient: IpcExample_IPCExampleServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ipcExample.IPCExampleService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct IpcExample_IPCExampleServiceNIOClient: IpcExample_IPCExampleServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ipcExample.IPCExampleService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol IpcExample_IPCExampleServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol? { get }

  func makeBidirectionalStreamCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<IpcExample_BidirectionalStreamRequest, IpcExample_BidirectionalStreamResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IpcExample_IPCExampleServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return IpcExample_IPCExampleServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeBidirectionalStreamCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<IpcExample_BidirectionalStreamRequest, IpcExample_BidirectionalStreamResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: IpcExample_IPCExampleServiceClientMetadata.Methods.bidirectionalStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IpcExample_IPCExampleServiceAsyncClientProtocol {
  public func bidirectionalStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<IpcExample_BidirectionalStreamResponse> where RequestStream: Sequence, RequestStream.Element == IpcExample_BidirectionalStreamRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: IpcExample_IPCExampleServiceClientMetadata.Methods.bidirectionalStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamInterceptors() ?? []
    )
  }

  public func bidirectionalStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<IpcExample_BidirectionalStreamResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == IpcExample_BidirectionalStreamRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: IpcExample_IPCExampleServiceClientMetadata.Methods.bidirectionalStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makebidirectionalStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct IpcExample_IPCExampleServiceAsyncClient: IpcExample_IPCExampleServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol IpcExample_IPCExampleServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'bidirectionalStream'.
  func makebidirectionalStreamInterceptors() -> [ClientInterceptor<IpcExample_BidirectionalStreamRequest, IpcExample_BidirectionalStreamResponse>]
}

public enum IpcExample_IPCExampleServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "IPCExampleService",
    fullName: "ipcExample.IPCExampleService",
    methods: [
      IpcExample_IPCExampleServiceClientMetadata.Methods.bidirectionalStream,
    ]
  )

  public enum Methods {
    public static let bidirectionalStream = GRPCMethodDescriptor(
      name: "bidirectionalStream",
      path: "/ipcExample.IPCExampleService/bidirectionalStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol IpcExample_IPCExampleServiceProvider: CallHandlerProvider {
  var interceptors: IpcExample_IPCExampleServiceServerInterceptorFactoryProtocol? { get }

  func bidirectionalStream(context: StreamingResponseCallContext<IpcExample_BidirectionalStreamResponse>) -> EventLoopFuture<(StreamEvent<IpcExample_BidirectionalStreamRequest>) -> Void>
}

extension IpcExample_IPCExampleServiceProvider {
  public var serviceName: Substring {
    return IpcExample_IPCExampleServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "bidirectionalStream":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<IpcExample_BidirectionalStreamRequest>(),
        responseSerializer: ProtobufSerializer<IpcExample_BidirectionalStreamResponse>(),
        interceptors: self.interceptors?.makebidirectionalStreamInterceptors() ?? [],
        observerFactory: self.bidirectionalStream(context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol IpcExample_IPCExampleServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: IpcExample_IPCExampleServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func bidirectionalStream(
    requestStream: GRPCAsyncRequestStream<IpcExample_BidirectionalStreamRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<IpcExample_BidirectionalStreamResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension IpcExample_IPCExampleServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return IpcExample_IPCExampleServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return IpcExample_IPCExampleServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: IpcExample_IPCExampleServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "bidirectionalStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<IpcExample_BidirectionalStreamRequest>(),
        responseSerializer: ProtobufSerializer<IpcExample_BidirectionalStreamResponse>(),
        interceptors: self.interceptors?.makebidirectionalStreamInterceptors() ?? [],
        wrapping: self.bidirectionalStream(requestStream:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol IpcExample_IPCExampleServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'bidirectionalStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makebidirectionalStreamInterceptors() -> [ServerInterceptor<IpcExample_BidirectionalStreamRequest, IpcExample_BidirectionalStreamResponse>]
}

public enum IpcExample_IPCExampleServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "IPCExampleService",
    fullName: "ipcExample.IPCExampleService",
    methods: [
      IpcExample_IPCExampleServiceServerMetadata.Methods.bidirectionalStream,
    ]
  )

  public enum Methods {
    public static let bidirectionalStream = GRPCMethodDescriptor(
      name: "bidirectionalStream",
      path: "/ipcExample.IPCExampleService/bidirectionalStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
